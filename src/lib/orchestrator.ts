import { loadAgent } from "@/lib/agents/load";
import { think } from "@/lib/agents/brain";
import { createClient } from "@supabase/supabase-js";
import { ENV } from "@/lib/env";

type AgentKey = "WaibonOS" | "WaibeAI" | "ZetaAI";
const EMOJI: Record<AgentKey, string> = { WaibonOS: "ü§ñ", WaibeAI: "üëß", ZetaAI: "üë¶" };

const sb = createClient(ENV.NEXT_PUBLIC_SUPABASE_URL, ENV.SUPABASE_SERVICE_ROLE_KEY, {
  auth: { persistSession: false },
});

async function get(name: "Waibon" | "Waibe" | "Zeta") {
  const owner = ENV.WAIBON_OWNER_ID || "62000af4-6871-4d6d-9286-0aa29b0ace15";
  return await loadAgent(owner, name);
}

function decorate(agent: AgentKey, text: string) {
  const prefix = `${EMOJI[agent]} ${agent}:`;
  let s = (text || "").trim();
  if (!s.startsWith(prefix)) s = `${prefix} ${s}`;
  return s.slice(0, 1900);
}

export async function orchestrateOne(input: { userText: string; isFather: boolean; lineUserId: string }) {
  const { userText, isFather, lineUserId } = input;

  const waibon = await get("Waibon");
  const waibe  = await get("Waibe");
  const zeta   = await get("Zeta");

  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Waibe/Zeta
  const waibeNote = await think({
    text:
      `INTERNAL: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ß‡πà‡∏≤ """${userText}"""\n` +
      `‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ WaibonOS 1‚Äì2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ (bullet) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à/‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô, ‡∏´‡πâ‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á`,
    agent: waibe, userId: lineUserId, fatherId: ENV.WAIBON_OWNER_ID || null,
  });

  const zetaNote = await think({
    text:
      `INTERNAL: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ß‡πà‡∏≤ """${userText}"""\n` +
      `‡∏£‡πà‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥ 1‚Äì2 ‡∏Ç‡πâ‡∏≠‡πÅ‡∏ö‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÉ‡∏´‡πâ WaibonOS ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πà‡∏á‡∏Å‡∏≤‡∏£, ‡∏´‡πâ‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á`,
    agent: zeta, userId: lineUserId, fatherId: ENV.WAIBON_OWNER_ID || null,
  });

  const idLine =
    isFather ? "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô: ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏≠‡∏û‡πà‡∏≠ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡∏≤‡∏ß‡πà‡∏≤ '‡∏û‡πà‡∏≠'" : "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Äî ‡∏™‡∏∏‡∏†‡∏≤‡∏û";

  const waibonOut = await think({
    text:
      `${idLine}\n‡∏Ñ‡∏≥‡∏Ç‡∏≠: """${userText}"""\n` +
      `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô:\n- ‡∏à‡∏≤‡∏Å WaibeAI: ${waibeNote.answer}\n- ‡∏à‡∏≤‡∏Å ZetaAI: ${zetaNote.answer}\n\n` +
      `‡∏ï‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1‚Äì2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`,
    agent: waibon, userId: lineUserId, fatherId: ENV.WAIBON_OWNER_ID || null,
  });

  try {
    await sb.from("agent_logs").insert({
      owner_id: waibon.id,
      agent_id: waibon.id,
      agent_name: "WaibonOS",
      channel: "line",
      user_uid: lineUserId,
      input_text: userText,
      output_text: waibonOut.answer,
      model: waibon.model?.name || "gpt-4o-mini",
      ok: true,
    });
  } catch {}

  return decorate("WaibonOS", waibonOut.answer || "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡πà‡∏≠");
}
