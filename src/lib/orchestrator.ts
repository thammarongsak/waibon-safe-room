//src/lib/orchestrator.ts
import { loadAgent } from "@/lib/agents/load";
import { think } from "@/lib/agents/brain";
import { createClient } from "@supabase/supabase-js";

type AgentKey = "WaibonOS" | "WaibeAI" | "ZetaAI";

const EMOJI: Record<AgentKey, string> = { WaibonOS: "ü§ñ", WaibeAI: "üëß", ZetaAI: "üë¶" };
const DISPLAY: Record<AgentKey, string> = { WaibonOS: "WaibonOS", WaibeAI: "WaibeAI", ZetaAI: "ZetaAI" };
const PRONOUN: Record<AgentKey, string> = { WaibonOS: "‡∏Ñ‡∏£‡∏±‡∏ö", WaibeAI: "‡∏Ñ‡πà‡∏∞", ZetaAI: "‡∏Ñ‡∏£‡∏±‡∏ö" };

function decorate(agent: AgentKey, text: string) {
  const pron = PRONOUN[agent];
  let s = String(text || "").trim();
  if (s && !new RegExp(`\\b${pron}[.!?‚Ä¶]*$`).test(s)) s = `${s} ${pron}`;
  const prefix = `${EMOJI[agent]} ${DISPLAY[agent]}:`;
  if (!s.startsWith(prefix)) s = `${prefix} ${s}`;
  return s.slice(0, 1900);
}

const sb = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!,
  { auth: { persistSession: false } }
);

// ‡πÇ‡∏´‡∏•‡∏î agent ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á (‡∏û‡πà‡∏≠)
async function get(agentName: "Waibon" | "Waibe" | "Zeta") {
  const owner = process.env.WAIBON_OWNER_ID || "62000af4-6871-4d6d-9286-0aa29b0ace15";
  return await loadAgent(owner, agentName);
}

export async function orchestrateOne(input: { userText: string; isFather: boolean; lineUserId: string }) {
  const { userText, isFather, lineUserId } = input;

  // ‡πÇ‡∏´‡∏•‡∏î 3 ‡∏ï‡∏±‡∏ß
  const waibon = await get("Waibon");
  const waibe  = await get("Waibe");
  const zeta   = await get("Zeta");

  // ===== Phase A: ‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô "‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô" ‡∏à‡∏≤‡∏Å Waibe/Zeta (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
  const waibeNote = await think({
    text:
      `INTERNAL: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ """${userText}"""\n` +
      `‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ‡∏û‡∏µ‡πà WaibonOS 1‚Äì2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÅ‡∏ö‡∏ö bullet ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à/‡∏™‡∏±‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ` +
      `(‡∏´‡πâ‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á, ‡∏´‡πâ‡∏≤‡∏°‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥, ‡πÑ‡∏ó‡∏¢‡∏•‡πâ‡∏ß‡∏ô)`,
    agent: waibe,
    userId: lineUserId,
    fatherId: process.env.WAIBON_OWNER_ID || null,
  });

  const zetaNote = await think({
    text:
      `INTERNAL: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤ """${userText}"""\n` +
      `‡∏£‡πà‡∏≤‡∏á "‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥" ‡∏™‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏Å 1‚Äì2 ‡∏Ç‡πâ‡∏≠ (‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ/‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô) ‡πÉ‡∏´‡πâ WaibonOS ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡∏°‡∏ï‡πà‡∏≠ ` +
      `(‡∏´‡πâ‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á, ‡πÑ‡∏ó‡∏¢‡∏•‡πâ‡∏ß‡∏ô)`,
    agent: zeta,
    userId: lineUserId,
    fatherId: process.env.WAIBON_OWNER_ID || null,
  });

  // ===== Phase B: ‡πÉ‡∏´‡πâ WaibonOS ‡∏ï‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‚Äú‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1‚Äì2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‚Äù ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏ß‡∏°
  const fatherLine =
    isFather
      ? "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô: ‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏≠‡∏û‡πà‡∏≠ ‚Äî ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏Ç‡∏≤‡∏ß‡πà‡∏≤ '‡∏û‡πà‡∏≠' ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"
      : "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Äî ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô";

  const waibonOut = await think({
    text:
      `${fatherLine}\n` +
      `‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: """${userText}"""\n` +
      `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡∏° (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô):\n` +
      `- ‡∏à‡∏≤‡∏Å WaibeAI: ${waibeNote.answer}\n` +
      `- ‡∏à‡∏≤‡∏Å ZetaAI: ${zetaNote.answer}\n\n` +
      `‡∏à‡∏á‡∏ï‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1‚Äì2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ, ‡∏ï‡∏£‡∏á‡∏á‡∏≤‡∏ô, ‡∏ö‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô.`,
    agent: waibon,
    userId: lineUserId,
    fatherId: process.env.WAIBON_OWNER_ID || null,
  });

  // log ‡πÄ‡∏ö‡∏≤ ‡πÜ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á agent_logs)
  try {
    await sb.from("agent_logs").insert({
      owner_id: waibon.id,
      agent_id: waibon.id,
      agent_name: "WaibonOS",
      channel: "line",
      user_uid: lineUserId,
      input_text: userText,
      output_text: waibonOut.answer,
      model: waibon.model?.name || "gpt-4o-mini",
      ok: true,
    });
  } catch {}

  return decorate("WaibonOS", waibonOut.answer || "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡πà‡∏≠");
}
